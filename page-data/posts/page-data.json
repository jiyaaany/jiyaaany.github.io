{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","categories":["All","TIL","experience","algorithm","idea"],"edges":[{"node":{"id":"65d5af7c-08ad-5239-bbe7-1063d4fa30d1","excerpt":"해시 (Hash) 임의의 크기를 가진 데이터(Key)를 고정된 크기의 데이터(Value)로 변화시켜 저장하는 것 키에 대한 해시 값을 사용하여 값을 저장하고 키-값 쌍의 갯수에 따라 동적으로 크기가 증가하는 연관 배열 키에 대한 해시 값을 구하는 과정을 해싱(Hashing)이라고 하며 이때 사용하는 함수(알고리즘) 해시 함수(Hash Function)이라고 한다. 해시 값 자체를 index로 사용하기 때문에 평균 시간 복잡도가 O(1)로 매우 빠름 연관 배열? 연관 배열(associative array)은 자료구조의 하나로, 키 하나와 값 하나가 연관되어 있으며 키를 통해 연관되는 값을 얻을 수 있다. 해시 함수 (Hash Function) 임의의 길이의 데이터를 입력받아 일정한 길이의 비트열로 반환시켜주는 함수 원래의 값이나 키를 색인하는데 사용되며, 그 값이 관련된 데이터가 검색될 때마다 다시 사용된다. 데이터의 효율적 관리를 목적으로 임의의 길이의 데이터를 고정된 길이의 데이…","fields":{"slug":"/hash/"},"frontmatter":{"categories":"algorithm","title":"해시(Hash)️","date":"November 25, 2021"}},"next":{"fields":{"slug":"/idea/"}},"previous":null},{"node":{"id":"6ba29942-f9d1-5a7a-8647-9c52aaa9f4cc","excerpt":"단어 외우기 토익 영단어를 외우면서 원보카 라는 어플을 사용하고 있습니다. 직접 외울 단어들을 등록한 후 정해진 간격으로 알림이 발생되어 단어를 공부할 수 있는 앱입니다. 사용 중 개선되었으면 하는 부분은 크게 두가지 입니다. 1. 단어를 일일이 입력해야하는 프로세스 개선 사진 찍었을 때 자동으로 등록되는게 베스트 아이디어지만, 단어장의 형태가 제각각이기 때문에 조금은 힘들지 않을까?라는 생각이 들었습니다. 이를 보완하기 위한 방법으로는 구글 번역기와 같이 영역을 선택하여 등록할 수 있는 방법입니다. eg.  2. 주기적으로 단어를 공부할 수 있는 알림 개선 현재는 아래 스크린샷과 같이 알림 타입과 주기등을 설정하여 공부할 수 있도록 제공하고 있습니다. 설정한 타입별로 알림이 발생하면 그 알림을 링크 시에 정답을 확인할 수 있는 방법입니다.  저는 대부분의 알림을 워치로 확인하다 보니 워치에서 알림 클릭 시 사진2 와 같은 방법으로 풀 수 있으면 좋겠다는 생각을 했습니다. (그럼 …","fields":{"slug":"/idea/"},"frontmatter":{"categories":"idea","title":"그냥 번뜩이는 생각들을 아카이빙합니다.","date":"November 18, 2021"}},"next":{"fields":{"slug":"/react-query/"}},"previous":{"fields":{"slug":"/hash/"}}},{"node":{"id":"90cd3f8b-498f-58d0-a72c-ffff831f03ba","excerpt":"시작하며 친구들과 프로젝트를 진행하면서 React Query 를 사용하게 되었습니다. 간단히 찾아보니 api등의 비동기 통신을 도와주는 라이브러리 라는 것으로 파악했습니다. 기존에도 를 사용하여 프로젝트를 진행할 때 여러 비동기 통신을 해보았지만 단순 를 통해 통신하는 것만 경험해보았습니다. 를 살펴보며 왜 써야하는지? 만 사용했을 때와 다른 점은 무엇인지 알아봅시다.  는 웹 서비스 요청에 의한 데이터를 관리하는데 도움을 주는 라이브러리 입니다. 실제 요청은 여전히  또는 를 사용하여 하고, 는 라이프 사이클의 적절한 시간에 요청하는 코드를 호출합니다. 또한 요청에 의한 데이터를 저장해두고, 필요한 때 데이터를 제공합니다. 이 외에도 는 캐싱 및 재요청 같은 수많은 기능을 제공하지만, 가장 큰 장점은 코드를 정리화한다는 것입니다. 사용법 데이터를 가져와야하는 컴포넌트 상위에  컴포넌트가 필요합니다.  사용하기  훅을 사용하여 데이터를 가져올 수 있습니다. 는 첫 번째 인자로 고유…","fields":{"slug":"/react-query/"},"frontmatter":{"categories":"TIL","title":"React Query","date":"November 16, 2021"}},"next":{"fields":{"slug":"/react-router-tips/"}},"previous":{"fields":{"slug":"/idea/"}}},{"node":{"id":"9ad9c308-0564-5436-982c-8928e6c0826a","excerpt":"시작하며 토이프로젝트를 진행하며 React Router 에 대해 알게된 점을 기록해두자 ! 정리   키워드는 정확히 일치 되었을 때만 지정된 컴포넌트를 보여주는 속성이다. 만약  키워드 없이 라우터를 지정한다면 ,  모두 같은 컴포넌트를 렌더링한다. 와의 차이  키워드만으로는 에러가 발생했을 때의 처리가 어렵다. 아래와 같은 라우터가 있을 때 지정되지 않은 url에 접근할 경우  컴포넌트를 렌더링 하지 않는다는 것을 확인할 수 있다.  이 문제를 해결하기 위한 방법으로 나온 것이 이다. 는 첫번째로 매칭되는 를 가진 컴포넌트를 렌더링 시킨다. 이것이 와 다른점이며, 지정되지 않은 url에 접근 시  컴포넌트를 렌더링 시킨다는 것을 확인할 수 있다.   키워드는 trailing slash가 있을 경우에만 일치한다.. 추가로 슬래시 뒤에 URL이 있는 경우엔 영향을 미치지 않는다.   path location.path match           키워드와 함께 사용할 경우 이렇게 작동…","fields":{"slug":"/react-router-tips/"},"frontmatter":{"categories":"TIL","title":"사용하면서 배우는 React Router","date":"November 10, 2021"}},"next":{"fields":{"slug":"/optimization/"}},"previous":{"fields":{"slug":"/react-query/"}}},{"node":{"id":"99fe3d66-765c-5828-bfc5-2f2549f6c878","excerpt":"시작하며 회사에서 커머스 입점몰 사이트를 개발하고 있다. 상품 정보가 워낙 다양한 정보가 많기 때문에 복잡한 상품일수록 상세 페이지를 불러오는 속도가 느리다는 생각이 들어 이 부분을 최적하 해보기로 결심했다. 최적화 전  흠.. 왜 7.99초나 걸렸는지 알 수 없다. 캐시 비우기 및 강력 새로고침 시에는 이정도가 걸리는 것 같고\n 일반 새로고침 시에는 2.25초 정도 걸리는 듯 하다.","fields":{"slug":"/optimization/"},"frontmatter":{"categories":"TIL experience","title":"최적화 경험기","date":"November 05, 2021"}},"next":{"fields":{"slug":"/cookat-market-renewal/"}},"previous":{"fields":{"slug":"/react-router-tips/"}}},{"node":{"id":"d3239233-5a2c-5fde-882d-a76c2b985103","excerpt":"시작하며 리뉴얼 과정 스택 현재 어플리케이션 스택은 웹 앱으로 되어있어 웹 코드에 앱 껍데기를 씌운 형태이다. 사이드로 진행하는 프로젝트이기 때문에 네이티브 개발을 하는데에 한계가 있어 React Native 를 선택했다. 주요 과정 1. React Navigation Install expo 프로젝트의 경우 설치 방법이 다를 수 있으니 공식 문서를 참고하는 것이 좋다.  Tab navigation 2. React Native Elements Install Install react-native-vector-icons Install react-native-safe-area-context 트러블 슈팅 React Native에서 svg 파일 사용하기 로고나 아이콘 등의  파일을 사용하려고 하니 다음과 같은 오류를 마주했다.    React Native에서 파일을 사용하는 방법을 찾아보니 react-native-svg 라는 패키지를 사용하면 된다. 사용법은 링크를 참고해도 되고 아래 예시를…","fields":{"slug":"/cookat-market-renewal/"},"frontmatter":{"categories":"experience","title":"React Native로 쿠캣마켓 앱 리뉴얼하기 📱","date":"October 28, 2021"}},"next":{"fields":{"slug":"/recoil/"}},"previous":{"fields":{"slug":"/optimization/"}}},{"node":{"id":"a7b77569-c3e4-580c-890b-6296968c2f28","excerpt":"시작하며 니팅 프로젝트를 진행하며 recoil이라는 상태 관리 라이브러리르 처음 사용해보았다. 기존에 구성이 다 잡혀있어서 새로운 상태 추가, 기존에 있던 상태 사용 등의 것들만 해보았는데 프로젝트에서 recoil을 사용하는 방법과 atom, selector에 대한 개념적인 부분이 부족하다고 생각하여 공식문서 를 읽어보았다. Recoil Recoil은 React를 위한 상태관리 라이브러리이다. 작고 React스러운 Recoil은 React처럼 작동하고 생각합니다. 앱에 추가하여 빠르고 유연한 공유되는 상태를 사용해보세요. 데이터 흐름 그래프 파생 데이터와 비동기 쿼리는 순수 함수와 효율적인 구독으로 관리됩니다. 교차하는 앱 관찰 코드 분할을 손상시키지 않고 앱 전체의 모든 상태 변경을 관찰하여 지속성, 라우팅, 시간 이동 디버깅 또는 실행 취소를 구현합니다. 주요 개념 개요 Recoil을 사용하면 atoms(공유 상태)에서 selectors(순수 함수)를 거쳐 React 컴포넌트로…","fields":{"slug":"/recoil/"},"frontmatter":{"categories":"TIL","title":"Recoil","date":"October 27, 2021"}},"next":{"fields":{"slug":"/typescript/"}},"previous":{"fields":{"slug":"/cookat-market-renewal/"}}},{"node":{"id":"2c308f96-ced6-55ec-97e1-84fdf84a0cdf","excerpt":"시작하며 Typescript 3.5 버전에서 이라는 헬퍼타입이 추가되었다. Omit은 빼다 라는 뜻을 가지고 있다. 타입스크립트의 Utility Types 에 보면 Omit 외에도 여러 가지 타입이 있는데,   타입에서  타입을 제거한 새로운 타입을 만드는 타입이다.  ()에서 키 속성 집합(문자열 리터럴 또는 문자열 리터럴 조합 -> , )을 선택하여 새로운 유형을 생성한다. type TodoPreview = Pick<Todo, “title” | “completed”> const todo: TodoPreview = {\n  title: ‘Clean room’,\n  completed: false,\n} 마치며 타입스크립트를 처음 사용할 때 일일이 선언해줘야한다는 번거로움이 있었는데 여러 헬퍼타입으로 타입을 재사용할 수 있도록 발전하고 있다. 다른 헬퍼타입들도 공부해두면 여러 번 선언되는 것을 막을 수 있을 것 같다. Refer https://www.typescriptlang.org/d…","fields":{"slug":"/typescript/"},"frontmatter":{"categories":"TIL","title":"Typescript 🤙🏻","date":"October 27, 2021"}},"next":{"fields":{"slug":"/react-tips/"}},"previous":{"fields":{"slug":"/recoil/"}}},{"node":{"id":"6a8f7f55-3149-55c4-846f-32491d500b12","excerpt":"unknown prop 경고 오류코드  원인 React 절대 경로 설정 import 구문을 상대 경로로 지정할 경우 파일이 이동되거나 등의 이벤트가 발생했을 때 오류가 발생할 수 있기 때문에 절대 경로로 변경하여 사용한다. 해결방법 tsconfig.json import문 정렬 import문이 길어질 경우 가독성을 위해 우선순위를 설정하여 정렬한다. eslint-plugin-import 패키지의 을 사용한다. 설치 설정","fields":{"slug":"/react-tips/"},"frontmatter":{"categories":"TIL","title":"React 프로젝트를 진행하며 겪은 어려움과 해결!🧐","date":"October 26, 2021"}},"next":{"fields":{"slug":"/shell-commands/"}},"previous":{"fields":{"slug":"/typescript/"}}},{"node":{"id":"b22781c2-4151-5304-b358-a37b71338771","excerpt":"사용 중인 포트 찾고 kill하기 찾기 kill PID는 찾기 명령어를 통해 알아낼 수 있다.","fields":{"slug":"/shell-commands/"},"frontmatter":{"categories":"TIL","title":"자주 쓰이는 쉘 명령어","date":"October 22, 2021"}},"next":{"fields":{"slug":"/react-native-tips/"}},"previous":{"fields":{"slug":"/react-tips/"}}},{"node":{"id":"34b22f1d-8282-5559-8a6d-3f95854e47ef","excerpt":"환경세팅 설치 Android 1. 안드로이드 스튜디오 설치 안드로이드 스튜디오 를 설치하고 아래 항목들을 체크해준다. Android SDK Android SDK Platform Android Virtual Device 2. Android SDK 설치 안드로이드 스튜디오 SDK Manager에서 Android 10.0 버전을 체크하여 설치해준다.\n Inter x86 Atom_64 System Image or Google APIs Inter x86 Atom System Image\n“SDK Tools” 탭으로 이동하여 아래 두가지 항목을 체크한 후 Apply 해준다. “Android SDK Build-Tools” 29.0.2  “Android SDK Command-line Tools (latest)” 3.  환경 변수 아래 명령어를 통해 환경변수가 잘 지정되었는지 확인한다. 명령어들 상태 확인 아래 명령어를 통해 환경 세팅이 잘되었는지를 확인할 수 있다. 실행 결과\n 팁들 실행 오류  …","fields":{"slug":"/react-native-tips/"},"frontmatter":{"categories":"experience","title":"React Native 환경 셋팅과 트러블 슈팅","date":"October 21, 2021"}},"next":{"fields":{"slug":"/input-events/"}},"previous":{"fields":{"slug":"/shell-commands/"}}},{"node":{"id":"38f98a24-f317-5c94-92eb-cd67349bb8ed","excerpt":"시작하며 input 요소의 값이 변경될 때 캐치할 수 있는 이벤트는 과 가 있다. 이 둘의 차이점에 대해 알아보자.  VS   이벤트는  이벤트와 다르게 가 바뀔 때마다 반드시 일어난다. stackoverflow 답변에 더 자세한 차이점을 설명해주고 있다. : 사용자 인터페이스를 통해 텍스트 내용이 변경될 때 발생한다. (텍스트 내용의 변경사항) : 값을 선택하거나 옵션 선택하자마자, 한글 입력의 경우 한글자가 완성된 뒤 다른 키를 입력(예: 엔터 키)이 일어나야 발생된다. , ,  태그에서 사용이 가능하다. : 값의 변경 + 포커스 이동 : 옵션이 변경되었을 때 Ref https://stackoverflow.com/questions/17047497/difference-between-change-and-input-event-for-an-input-element https://developer.mozilla.org/ko/docs/Web/API/HTMLElement/input_event","fields":{"slug":"/input-events/"},"frontmatter":{"categories":"TIL","title":"input change, input 이벤트","date":"October 21, 2021"}},"next":{"fields":{"slug":"/react-native-social-login/"}},"previous":{"fields":{"slug":"/react-native-tips/"}}},{"node":{"id":"f84b7123-553a-5e6b-b913-c1a9f1a8041b","excerpt":"시작하며 근육맨 이라는 모바일 어플리케이션 프로젝트를 진행하며 개발 언어로 React Native 를 채택했고, 소셜 로그인 기능을 추가하게 되었다. 사전 준비 RN >= 0.60 (RN <= 0.59의 경우 패키지 설치법이 상이할 수 있습니다. 카카오 애플리케이션(프로젝트) 추가 먼저 Kakao Developers 사이트에 접속해 내 애플리케이션 메뉴에서 애플리케이션 추가를 해줍니다.\n\n1-1. 앱 이름, 사업자명 입력 시 간단히 애플리케이션을 생성할 수 있습니다.\n 기본값으로 카카오 로그인이 비활성화 되어 있기 때문에 애플리케이션 > 카카오 로그인 메뉴에서 활성화 시켜줍니다.\n 카카오 로그인 활성화 부분 하단에 있는 Redirect URI를 설정해줍니다. 공식 문서에서는 아래 두가지의 규칙을 지켜 Redirect URI를 설정해야 한다고 가이드하고 있습니다. Redirect URI는 HTTP/HTTPS 프로토콜 및 80, 443 포트를 허용합니다. Redirect URI는 HT…","fields":{"slug":"/react-native-social-login/"},"frontmatter":{"categories":"experience","title":"RN 소셜 로그인 모두 파헤쳐 보자 ! 👀","date":"October 17, 2021"}},"next":{"fields":{"slug":"/vue-common-js/"}},"previous":{"fields":{"slug":"/input-events/"}}},{"node":{"id":"81b74c75-50ba-5c89-bfd6-1653b455fcbc","excerpt":"시작하며 매 프로젝트를 구축할 때마다 하는 고민 ‘공통 모듈을 어떻게 관리할까?’. 이번 프로젝트를 진행하면서도 어김없이 이 질문에 대한 고민을 해보았다. 규모가 꽤 있는 Vue 프로젝트를 시작 단계부터 참여했던 경험이 없었기 때문에 여러 아티클을 찾아보았다. 환경 Vue2 + Nuxt.js 플러그인으로 작성하기 Vue 공식문서에서는 플러그인에 대해 설명하고 있다. 공통으로 사용할 js 파일을   이나 선호하는 곳에 만들어준다. 사용은 이렇게 타입스크립트를 사용하지 않는 Nuxt 환경이라면 다음 방법도 가능하다. Nuxt에서 제공하는  함수를 사용하는 건데 예제 코드는 아래를 참고하면 된다. 내가 위 방법대로 시도하다보니 Typescript의 벽에 부딪혔다. 파라미터로 받아오는 Vue에 대한 타입을 지정하라고 하는데 는 절대 쓰기 싫어서 ,, 다른 방법을 찾아보았다.\n Nuxt Typescript 공식 문서에서 plugins를 등록하는 가이드를 찾을 수 있었고 결과를 미리 말하자면…","fields":{"slug":"/vue-common-js/"},"frontmatter":{"categories":"experience","title":"Vue 프로젝트에서 공통 함수 세팅하기","date":"October 15, 2021"}},"next":{"fields":{"slug":"/jenkins/"}},"previous":{"fields":{"slug":"/react-native-social-login/"}}},{"node":{"id":"4104e70f-08b1-5d1b-be4c-53e0d264ae1b","excerpt":"시작하며 팀원분께서 현재 내가 참여하고 있는 신규 프로젝트와 기존 구축되어 있던 프로젝트에 AWS 컨테이너 서비스들을 사용하고 Jenkins를 통해 배포를 진행하는 작업을 진행하셨다. 이에 대한 경험을 공유하기 위한 세미나 내용을 정리해보자! 사전설명 ‘이런게 있구나’ 하고 넘어가도 내용 ELB 보다 Cluster가 우선시 된다. ELB TargetGroup이 3개로 지정되어 있어도, Cluster가 2개로 지정되어 있으면 2개의 인스턴스만 사용된다. EC2 인스턴스 안에는 Amazon Agent, Application 두 개의 컨테이너가 있다. Cluster로 지정되지 않은 spare 컨테이너가 N개 존재한다. spare 컨테이너가 많을 수록 성능이 좋을 것으로 예상 spare 컨테이너에서 배포가 시작되는데 1개에서 시작하는 것보다 2개 이상에서 동시에 배포되는 것이 속도가 빠르기 때문. Jenkins 배포 실행 시 spare 컨테이너에 배포가 시작되고, Cluster로 지정된 …","fields":{"slug":"/jenkins/"},"frontmatter":{"categories":"TIL","title":"Jenkins 세미나","date":"October 14, 2021"}},"next":null,"previous":{"fields":{"slug":"/vue-common-js/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}