{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/TIL","result":{"pageContext":{"currentCategory":"TIL","categories":["All","TIL","experience","algorithm","idea"],"edges":[{"node":{"id":"90cd3f8b-498f-58d0-a72c-ffff831f03ba","excerpt":"시작하며 친구들과 프로젝트를 진행하면서 React Query 를 사용하게 되었습니다. 간단히 찾아보니 api등의 비동기 통신을 도와주는 라이브러리 라는 것으로 파악했습니다. 기존에도 를 사용하여 프로젝트를 진행할 때 여러 비동기 통신을 해보았지만 단순 를 통해 통신하는 것만 경험해보았습니다. 를 살펴보며 왜 써야하는지? 만 사용했을 때와 다른 점은 무엇인지 알아봅시다.  는 웹 서비스 요청에 의한 데이터를 관리하는데 도움을 주는 라이브러리 입니다. 실제 요청은 여전히  또는 를 사용하여 하고, 는 라이프 사이클의 적절한 시간에 요청하는 코드를 호출합니다. 또한 요청에 의한 데이터를 저장해두고, 필요한 때 데이터를 제공합니다. 이 외에도 는 캐싱 및 재요청 같은 수많은 기능을 제공하지만, 가장 큰 장점은 코드를 정리화한다는 것입니다. 사용법 데이터를 가져와야하는 컴포넌트 상위에  컴포넌트가 필요합니다.  사용하기  훅을 사용하여 데이터를 가져올 수 있습니다. 는 첫 번째 인자로 고유…","fields":{"slug":"/react-query/"},"frontmatter":{"categories":"TIL","title":"React Query","date":"November 16, 2021"}},"next":{"fields":{"slug":"/react-router-tips/"}},"previous":{"fields":{"slug":"/idea/"}}},{"node":{"id":"9ad9c308-0564-5436-982c-8928e6c0826a","excerpt":"시작하며 토이프로젝트를 진행하며 React Router 에 대해 알게된 점을 기록해두자 ! 정리   키워드는 정확히 일치 되었을 때만 지정된 컴포넌트를 보여주는 속성이다. 만약  키워드 없이 라우터를 지정한다면 ,  모두 같은 컴포넌트를 렌더링한다. 와의 차이  키워드만으로는 에러가 발생했을 때의 처리가 어렵다. 아래와 같은 라우터가 있을 때 지정되지 않은 url에 접근할 경우  컴포넌트를 렌더링 하지 않는다는 것을 확인할 수 있다.  이 문제를 해결하기 위한 방법으로 나온 것이 이다. 는 첫번째로 매칭되는 를 가진 컴포넌트를 렌더링 시킨다. 이것이 와 다른점이며, 지정되지 않은 url에 접근 시  컴포넌트를 렌더링 시킨다는 것을 확인할 수 있다.   키워드는 trailing slash가 있을 경우에만 일치한다.. 추가로 슬래시 뒤에 URL이 있는 경우엔 영향을 미치지 않는다.   path location.path match           키워드와 함께 사용할 경우 이렇게 작동…","fields":{"slug":"/react-router-tips/"},"frontmatter":{"categories":"TIL","title":"사용하면서 배우는 React Router","date":"November 10, 2021"}},"next":{"fields":{"slug":"/optimization/"}},"previous":{"fields":{"slug":"/react-query/"}}},{"node":{"id":"99fe3d66-765c-5828-bfc5-2f2549f6c878","excerpt":"시작하며 회사에서 커머스 입점몰 사이트를 개발하고 있다. 상품 정보가 워낙 다양한 정보가 많기 때문에 복잡한 상품일수록 상세 페이지를 불러오는 속도가 느리다는 생각이 들어 이 부분을 최적하 해보기로 결심했다. 최적화 전  흠.. 왜 7.99초나 걸렸는지 알 수 없다. 캐시 비우기 및 강력 새로고침 시에는 이정도가 걸리는 것 같고\n 일반 새로고침 시에는 2.25초 정도 걸리는 듯 하다.","fields":{"slug":"/optimization/"},"frontmatter":{"categories":"TIL experience","title":"최적화 경험기","date":"November 05, 2021"}},"next":{"fields":{"slug":"/cookat-market-renewal/"}},"previous":{"fields":{"slug":"/react-router-tips/"}}},{"node":{"id":"a7b77569-c3e4-580c-890b-6296968c2f28","excerpt":"시작하며 니팅 프로젝트를 진행하며 recoil이라는 상태 관리 라이브러리르 처음 사용해보았다. 기존에 구성이 다 잡혀있어서 새로운 상태 추가, 기존에 있던 상태 사용 등의 것들만 해보았는데 프로젝트에서 recoil을 사용하는 방법과 atom, selector에 대한 개념적인 부분이 부족하다고 생각하여 공식문서 를 읽어보았다. Recoil Recoil은 React를 위한 상태관리 라이브러리이다. 작고 React스러운 Recoil은 React처럼 작동하고 생각합니다. 앱에 추가하여 빠르고 유연한 공유되는 상태를 사용해보세요. 데이터 흐름 그래프 파생 데이터와 비동기 쿼리는 순수 함수와 효율적인 구독으로 관리됩니다. 교차하는 앱 관찰 코드 분할을 손상시키지 않고 앱 전체의 모든 상태 변경을 관찰하여 지속성, 라우팅, 시간 이동 디버깅 또는 실행 취소를 구현합니다. 주요 개념 개요 Recoil을 사용하면 atoms(공유 상태)에서 selectors(순수 함수)를 거쳐 React 컴포넌트로…","fields":{"slug":"/recoil/"},"frontmatter":{"categories":"TIL","title":"Recoil","date":"October 27, 2021"}},"next":{"fields":{"slug":"/typescript/"}},"previous":{"fields":{"slug":"/cookat-market-renewal/"}}},{"node":{"id":"2c308f96-ced6-55ec-97e1-84fdf84a0cdf","excerpt":"시작하며 Typescript 3.5 버전에서 이라는 헬퍼타입이 추가되었다. Omit은 빼다 라는 뜻을 가지고 있다. 타입스크립트의 Utility Types 에 보면 Omit 외에도 여러 가지 타입이 있는데,   타입에서  타입을 제거한 새로운 타입을 만드는 타입이다.  ()에서 키 속성 집합(문자열 리터럴 또는 문자열 리터럴 조합 -> , )을 선택하여 새로운 유형을 생성한다. type TodoPreview = Pick<Todo, “title” | “completed”> const todo: TodoPreview = {\n  title: ‘Clean room’,\n  completed: false,\n} 마치며 타입스크립트를 처음 사용할 때 일일이 선언해줘야한다는 번거로움이 있었는데 여러 헬퍼타입으로 타입을 재사용할 수 있도록 발전하고 있다. 다른 헬퍼타입들도 공부해두면 여러 번 선언되는 것을 막을 수 있을 것 같다. Refer https://www.typescriptlang.org/d…","fields":{"slug":"/typescript/"},"frontmatter":{"categories":"TIL","title":"Typescript 🤙🏻","date":"October 27, 2021"}},"next":{"fields":{"slug":"/react-tips/"}},"previous":{"fields":{"slug":"/recoil/"}}},{"node":{"id":"6a8f7f55-3149-55c4-846f-32491d500b12","excerpt":"unknown prop 경고 오류코드  원인 React 절대 경로 설정 import 구문을 상대 경로로 지정할 경우 파일이 이동되거나 등의 이벤트가 발생했을 때 오류가 발생할 수 있기 때문에 절대 경로로 변경하여 사용한다. 해결방법 tsconfig.json import문 정렬 import문이 길어질 경우 가독성을 위해 우선순위를 설정하여 정렬한다. eslint-plugin-import 패키지의 을 사용한다. 설치 설정","fields":{"slug":"/react-tips/"},"frontmatter":{"categories":"TIL","title":"React 프로젝트를 진행하며 겪은 어려움과 해결!🧐","date":"October 26, 2021"}},"next":{"fields":{"slug":"/shell-commands/"}},"previous":{"fields":{"slug":"/typescript/"}}},{"node":{"id":"b22781c2-4151-5304-b358-a37b71338771","excerpt":"사용 중인 포트 찾고 kill하기 찾기 kill PID는 찾기 명령어를 통해 알아낼 수 있다.","fields":{"slug":"/shell-commands/"},"frontmatter":{"categories":"TIL","title":"자주 쓰이는 쉘 명령어","date":"October 22, 2021"}},"next":{"fields":{"slug":"/react-native-tips/"}},"previous":{"fields":{"slug":"/react-tips/"}}},{"node":{"id":"38f98a24-f317-5c94-92eb-cd67349bb8ed","excerpt":"시작하며 input 요소의 값이 변경될 때 캐치할 수 있는 이벤트는 과 가 있다. 이 둘의 차이점에 대해 알아보자.  VS   이벤트는  이벤트와 다르게 가 바뀔 때마다 반드시 일어난다. stackoverflow 답변에 더 자세한 차이점을 설명해주고 있다. : 사용자 인터페이스를 통해 텍스트 내용이 변경될 때 발생한다. (텍스트 내용의 변경사항) : 값을 선택하거나 옵션 선택하자마자, 한글 입력의 경우 한글자가 완성된 뒤 다른 키를 입력(예: 엔터 키)이 일어나야 발생된다. , ,  태그에서 사용이 가능하다. : 값의 변경 + 포커스 이동 : 옵션이 변경되었을 때 Ref https://stackoverflow.com/questions/17047497/difference-between-change-and-input-event-for-an-input-element https://developer.mozilla.org/ko/docs/Web/API/HTMLElement/input_event","fields":{"slug":"/input-events/"},"frontmatter":{"categories":"TIL","title":"input change, input 이벤트","date":"October 21, 2021"}},"next":{"fields":{"slug":"/react-native-social-login/"}},"previous":{"fields":{"slug":"/react-native-tips/"}}},{"node":{"id":"4104e70f-08b1-5d1b-be4c-53e0d264ae1b","excerpt":"시작하며 팀원분께서 현재 내가 참여하고 있는 신규 프로젝트와 기존 구축되어 있던 프로젝트에 AWS 컨테이너 서비스들을 사용하고 Jenkins를 통해 배포를 진행하는 작업을 진행하셨다. 이에 대한 경험을 공유하기 위한 세미나 내용을 정리해보자! 사전설명 ‘이런게 있구나’ 하고 넘어가도 내용 ELB 보다 Cluster가 우선시 된다. ELB TargetGroup이 3개로 지정되어 있어도, Cluster가 2개로 지정되어 있으면 2개의 인스턴스만 사용된다. EC2 인스턴스 안에는 Amazon Agent, Application 두 개의 컨테이너가 있다. Cluster로 지정되지 않은 spare 컨테이너가 N개 존재한다. spare 컨테이너가 많을 수록 성능이 좋을 것으로 예상 spare 컨테이너에서 배포가 시작되는데 1개에서 시작하는 것보다 2개 이상에서 동시에 배포되는 것이 속도가 빠르기 때문. Jenkins 배포 실행 시 spare 컨테이너에 배포가 시작되고, Cluster로 지정된 …","fields":{"slug":"/jenkins/"},"frontmatter":{"categories":"TIL","title":"Jenkins 세미나","date":"October 14, 2021"}},"next":null,"previous":{"fields":{"slug":"/vue-common-js/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}